#version 460
layout (local_size_x = 1, local_size_y = 1) in;
layout (rgba8, binding = 0) uniform image2D imgOut;
struct PrcsInit {
	ivec2 point;
	float _[2];
	vec3 arrow;
	float _[1];
};
layout (std430, binding = 1) buffer prcsInitBuffer {
	PrcsInit prcsInit[];
};
struct PrcsIter {
	float dist;
};
layout (std430, binding = 2) buffer prcsIterBuffer {
	PrcsIter prcsIter[];
};
struct PrcsItem {
	vec4 circle;
};
layout (std430, binding = 3) buffer prcsItemBuffer {
	PrcsItem prcsItem[20];
};
layout (location = 0) uniform vec3 cameraPos;
layout (location = 1) uniform mat3 cameraDir;
const uint itemDepth = 2;
const float maxDist = 10000.0;

float trace (vec3 org, vec3 ray, PrcsItem itm) {
	vec3 crc_p = org - itm.circle.xyz;
	float b = dot(crc_p, ray);
	float d = b*b + itm.circle.w*itm.circle.w - length(crc_p)*length(crc_p);
	float a = -b - sqrt(abs(d));
	return max(a, 0) - maxDist * sign(min(min(d, a), 0));
}

void main () {
	const uint indx = gl_GlobalInvocationID.x + 1280 * gl_GlobalInvocationID.y;
	float dist = maxDist;
	for (int i = 0; i < 20; i++) {
		dist = min(dist, trace(cameraPos, cameraDir*prcsInit[indx].arrow, prcsItem[i]));
	}
	imageStore(imgOut, prcsInit[indx].point, vec4(
		dist/20,
		0,
		0,
		1
	));
}